import { BehaviorSubject, Observable } from "rxjs";
import { Room } from "../room/room.types";
import { Message } from "./../message/message.types";
import { RoomRepository } from "./../room/room.repository";
export declare class Me {
    readonly id: string;
    readonly openedRooms: Room[];
    readonly rooms: Room[];
    private roomRepository;
    static build(json: any, roomRepository: RoomRepository): Me;
    deviceSessionId: string;
    private internalUnreadMessageCount;
    private internalRoomCount;
    private firstSeenRoom;
    constructor(id: string, openedRooms: Room[], rooms: Room[], unreadMessageCount: number, roomCount: number, roomRepository: RoomRepository);
    unreadMessageCount: number;
    readonly observableUnreadMessageCount: BehaviorSubject<number>;
    readonly roomCount: number;
    readonly observableRoomCount: BehaviorSubject<number>;
    fetchOpenedRooms(): Observable<Room[]>;
    fetchClosedRooms(): Observable<Room[]>;
    fetchMoreRooms(): Observable<Room[]>;
    fetchRoomsById(roomIds: string[]): Observable<Room[]>;
    fetchRoomById(roomId: string): Observable<Room>;
    findOrFetchRoomById(roomId: string): Observable<Room>;
    handleNewMessage(newMessage: Message): void;
    addRoom(newRoom: Room): void;
    findRoomById(roomId: string): Room;
    openRoom(room: Room): Observable<Room>;
    closeRoom(room: Room): Observable<Room>;
    closeRooms(roomsToClose: Room[]): Observable<Room[]>;
    openRoomAndCloseOthers(roomToOpen: Room): Observable<Room>;
    hasOpenedRooms(): boolean;
    createRoom(name: string, userIds: string[], withoutDuplicate: boolean): Observable<Room>;
    buildRoom(userIds: string[]): Room;
    sendMessage(room: Room, content: string, contentType: string): Observable<Message>;
    isSentByMe(message: Message): boolean;
    deleteMessage(message: Message): Observable<Message>;
    addUserTo(room: Room, userId: string): Observable<Room>;
    private addRooms(rooms);
    private hasRoom(roomToFind);
    private hasRoomOpened(roomToFind);
    private findRoom(room);
    private findRoomOpened(roomToFind);
    private addToOpenedRoom(room);
    private removeFromOpenedRoom(closedRoom);
    private markAllReceivedMessagesAsRead(room);
    private toUser();
}
