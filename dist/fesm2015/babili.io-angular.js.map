{"version":3,"file":"babili.io-angular.js.map","sources":["ng://@babili.io/angular/configuration/token-configuration.types.ts","ng://@babili.io/angular/configuration/url-configuration.types.ts","ng://@babili.io/angular/authentication/not-authorized-error.ts","ng://@babili.io/angular/authentication/http-authentication-interceptor.ts","ng://@babili.io/angular/user/user.types.ts","ng://@babili.io/angular/message/message.types.ts","ng://@babili.io/angular/message/message.repository.ts","ng://@babili.io/angular/array.utils.ts","ng://@babili.io/angular/room/room.types.ts","ng://@babili.io/angular/room/room.repository.ts","ng://@babili.io/angular/me/me.types.ts","ng://@babili.io/angular/me/me.repository.ts","ng://@babili.io/angular/socket/bootstrap.socket.ts","ng://@babili.io/angular/me/me.service.ts","ng://@babili.io/angular/pipe/sort-room.ts","ng://@babili.io/angular/babili.module.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\n\n@Injectable()\nexport class TokenConfiguration {\n  public apiToken: string;\n\n  constructor() {}\n\n  isApiTokenSet(): boolean {\n    return this.apiToken !== undefined && this.apiToken !== null && this.apiToken !== \"\";\n  }\n\n  clear() {\n    this.apiToken = undefined;\n  }\n\n}\n","import { InjectionToken } from \"@angular/core\";\n\nexport const URL_CONFIGURATION = new InjectionToken<UrlConfiguration>(\"BabiliUrlConfiguration\");\n\nexport interface UrlConfiguration {\n  apiUrl: string;\n  socketUrl: string;\n  aliveIntervalInMs?: number;\n}\n","export class NotAuthorizedError {\n  constructor(readonly error: any) {}\n}\n","import { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\nimport { Inject, Injectable } from \"@angular/core\";\nimport { Observable, throwError } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport { TokenConfiguration } from \"./../configuration/token-configuration.types\";\nimport { URL_CONFIGURATION, UrlConfiguration } from \"./../configuration/url-configuration.types\";\nimport { NotAuthorizedError } from \"./not-authorized-error\";\n\n@Injectable()\nexport class HttpAuthenticationInterceptor implements HttpInterceptor {\n\n  constructor(@Inject(URL_CONFIGURATION) private urls: UrlConfiguration,\n              private tokenConfiguration: TokenConfiguration) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (this.shouldAddHeaderTo(request)) {\n      return next.handle(this.addHeaderTo(request, this.tokenConfiguration.apiToken))\n                 .pipe(catchError(error => {\n                   if (error instanceof HttpErrorResponse && error.status === 401) {\n                     return throwError(new NotAuthorizedError(error));\n                   } else {\n                     return throwError(error);\n                   }\n                 }));\n    } else {\n      return next.handle(request);\n    }\n  }\n\n  private addHeaderTo(request: HttpRequest<any>, token: string): HttpRequest<any> {\n    return request.clone({\n      headers: request.headers.set(\"Authorization\", `Bearer ${token}`)\n    });\n  }\n\n  private shouldAddHeaderTo(request: HttpRequest<any>): boolean {\n    return request.url.startsWith(this.urls.apiUrl);\n  }\n}\n","export class User {\n  static build(json: any): User {\n    if (json) {\n      return new User(json.id, json.attributes ? json.attributes.status : undefined);\n    } else {\n      return undefined;\n    }\n  }\n\n  static map(json: any): User[] {\n    if (json) {\n      return json.map(User.build);\n    } else {\n      return undefined;\n    }\n  }\n\n  constructor(readonly id: string,\n              readonly status: string) {}\n}\n","import * as momentLoaded from \"moment\";\nconst moment = momentLoaded;\n\nimport { User } from \"../user/user.types\";\n\nexport class Message {\n\n  static build(json: any): Message {\n    const attributes = json.attributes;\n    return new Message(json.id,\n                        attributes.content,\n                        attributes.contentType,\n                        moment(attributes.createdAt).toDate(),\n                        json.relationships.sender ? User.build(json.relationships.sender.data) : undefined,\n                        json.relationships.room.data.id);\n  }\n\n  static map(json: any): Message[] {\n    if (json) {\n      return json.map(Message.build);\n    } else {\n      return undefined;\n    }\n  }\n\n  constructor(readonly id: string,\n              readonly content: string,\n              readonly contentType: string,\n              readonly createdAt: Date,\n              readonly sender: User,\n              readonly roomId: string) {}\n\n  hasSenderId(userId: string) {\n    return this.sender && this.sender.id === userId;\n  }\n}\n","import { HttpClient } from \"@angular/common/http\";\nimport { Inject, Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { URL_CONFIGURATION, UrlConfiguration } from \"../configuration/url-configuration.types\";\nimport { Room } from \"../room/room.types\";\nimport { Message } from \"./message.types\";\n\nexport class NewMessage {\n  content: string;\n  contentType: string;\n  deviceSessionId: string;\n}\n\n@Injectable()\nexport class MessageRepository {\n\n  private roomUrl: string;\n\n  constructor(private http: HttpClient,\n              @Inject(URL_CONFIGURATION) configuration: UrlConfiguration) {\n    this.roomUrl = `${configuration.apiUrl}/user/rooms`;\n  }\n\n  create(room: Room, attributes: NewMessage): Observable<Message> {\n    return this.http.post(this.messageUrl(room.id), {\n      data: {\n        type: \"message\",\n        attributes: attributes\n      }\n    }).pipe(map((response: any) => Message.build(response.data)));\n  }\n\n  findAll(room: Room, attributes: {[param: string]: string | string[]}): Observable<Message[]> {\n    return this.http.get(this.messageUrl(room.id), { params: attributes })\n                    .pipe(map((response: any) => Message.map(response.data)));\n  }\n\n  delete(room: Room, message: Message): Observable<Message> {\n    return this.http.delete(`${this.messageUrl(room.id)}/${message.id}`)\n                    .pipe(map(response => message));\n  }\n\n  private messageUrl(roomId: string) {\n    return `${this.roomUrl}/${roomId}/messages`;\n  }\n\n}\n","export class ArrayUtils {\n  /**\n   * Returns the index of the first element in the array where predicate is true, and -1\n   * otherwise.\n   * @param items array that will be inspected to find an element index\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found,\n   * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n   */\n  static findIndex<T>(items: T[], predicate: (value: T, index: number) => boolean): number {\n    for (let currentIndex = 0; currentIndex < items.length; ++currentIndex) {\n      if (predicate.apply(items[currentIndex], currentIndex)) {\n        return currentIndex;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Returns the value of the first element in the array where predicate is true, and undefined\n   * otherwise.\n   * @param items array that will be inspected to find an element\n   * @param predicate find calls predicate once for each element of the array, in ascending\n   * order, until it finds one where predicate returns true. If such an element is found, find\n   * immediately returns that element value. Otherwise, find returns undefined.\n   */\n  static find<T>(items: T[], predicate: (value: T, index: number) => boolean): T {\n    for (let currentIndex = 0; currentIndex < items.length; ++currentIndex) {\n      const item = items[currentIndex];\n      if (predicate.apply(item, currentIndex)) {\n        return item;\n      }\n    }\n    return undefined;\n  }\n}\n","import * as momentLoaded from \"moment\";\nconst moment = momentLoaded;\nimport { BehaviorSubject, Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { ArrayUtils } from \"../array.utils\";\nimport { Message } from \"../message/message.types\";\nimport { User } from \"../user/user.types\";\nimport { MessageRepository, NewMessage } from \"./../message/message.repository\";\nimport { RoomRepository } from \"./room.repository\";\n\nexport class Room {\n\n  static build(json: any, roomRepository: RoomRepository, messageRepository: MessageRepository): Room {\n    const attributes = json.attributes;\n    const users = json.relationships && json.relationships.users ? User.map(json.relationships.users.data) : [];\n    const senders = json.relationships && json.relationships.senders ? User.map(json.relationships.senders.data) : [];\n    const messages = json.relationships && json.relationships.messages ? Message.map(json.relationships.messages.data) : [];\n    const initiator = json.relationships && json.relationships.initiator ? User.build(json.relationships.initiator.data) : undefined;\n    return new Room(json.id,\n                    attributes.name,\n                    attributes.lastActivityAt ? moment(attributes.lastActivityAt).utc().toDate() : undefined,\n                    attributes.open,\n                    attributes.unreadMessageCount,\n                    users,\n                    senders,\n                    messages,\n                    initiator,\n                    roomRepository);\n  }\n\n  static map(json: any, roomRepository: RoomRepository, messageRepository: MessageRepository): Room[] {\n    if (json) {\n      return json.map(room => Room.build(room, roomRepository, messageRepository));\n    } else {\n      return undefined;\n    }\n  }\n\n  newMessageNotifier: (message: Message) => any;\n  private internalOpen: BehaviorSubject<boolean>;\n  private internalUnreadMessageCount: BehaviorSubject<number>;\n  private internalName: BehaviorSubject<string>;\n  private internalLastActivityAt: BehaviorSubject<Date>;\n  private internalImageUrl: BehaviorSubject<string>;\n\n  constructor(readonly id: string,\n              name: string,\n              lastActivityAt: Date,\n              open: boolean,\n              unreadMessageCount: number,\n              readonly users: User[],\n              readonly senders: User[],\n              readonly messages: Message[],\n              readonly initiator: User,\n              private roomRepository: RoomRepository) {\n    this.internalOpen = new BehaviorSubject(open);\n    this.internalLastActivityAt = new BehaviorSubject(lastActivityAt);\n    this.internalName = new BehaviorSubject(name);\n    this.internalUnreadMessageCount = new BehaviorSubject(unreadMessageCount);\n    this.internalImageUrl = new BehaviorSubject(undefined);\n  }\n\n  get unreadMessageCount(): number {\n    return this.internalUnreadMessageCount.value;\n  }\n\n  set unreadMessageCount(count: number) {\n    this.internalUnreadMessageCount.next(count);\n  }\n\n  get observableUnreadMessageCount(): BehaviorSubject<number> {\n    return this.internalUnreadMessageCount;\n  }\n\n  get name(): string {\n    return this.internalName.value;\n  }\n\n  set name(name: string) {\n    this.internalName.next(name);\n  }\n\n  get observableName(): BehaviorSubject<string> {\n    return this.internalName;\n  }\n\n  get open(): boolean {\n    return this.internalOpen.value;\n  }\n\n  set open(open: boolean) {\n    this.internalOpen.next(open);\n  }\n\n  get observableOpen(): BehaviorSubject<boolean> {\n    return this.internalOpen;\n  }\n\n  get lastActivityAt(): Date {\n    return this.internalLastActivityAt.value;\n  }\n\n  set lastActivityAt(lastActivityAt: Date) {\n    this.internalLastActivityAt.next(lastActivityAt);\n  }\n\n  get observableLastActivityAt(): BehaviorSubject<Date> {\n    return this.internalLastActivityAt;\n  }\n\n  get imageUrl(): string {\n    return this.internalImageUrl.value;\n  }\n\n  set imageUrl(imageUrl: string) {\n    this.internalImageUrl.next(imageUrl);\n  }\n\n  get observableImageUrl(): BehaviorSubject<string> {\n    return this.internalImageUrl;\n  }\n\n\n  openMembership(): Observable<Room> {\n    return this.roomRepository.updateMembership(this, true);\n  }\n\n  closeMembership(): Observable<Room> {\n    return this.roomRepository.updateMembership(this, false);\n  }\n\n  markAllMessagesAsRead(): Observable<number> {\n    return this.roomRepository.markAllReceivedMessagesAsRead(this);\n  }\n\n  addMessage(message: Message) {\n    this.messages.push(message);\n    this.lastActivityAt = message.createdAt;\n  }\n\n  notifyNewMessage(message: Message) {\n    if (this.newMessageNotifier) {\n      this.newMessageNotifier.apply(message);\n    }\n  }\n\n\n  hasUser(userId: string): boolean {\n    return ArrayUtils.find(this.users.map(user => user.id), id => id === userId) !== undefined;\n  }\n\n  fetchMoreMessage(): Observable<Message[]> {\n    const params = {\n      firstSeenMessageId: this.messages.length > 0 ? this.messages[0].id : undefined\n    };\n    return this.roomRepository\n               .findMessages(this, params)\n               .pipe(\n      map(messages => {\n        this.messages.unshift.apply(this.messages, messages);\n        return messages;\n      })\n    );\n  }\n\n  findMessageWithId(id: string): Message {\n    return ArrayUtils.find(this.messages, message => message.id === id);\n  }\n\n  update(): Observable<Room> {\n    return this.roomRepository.update(this);\n  }\n\n  sendMessage(newMessage: NewMessage): Observable<Message> {\n    return this.roomRepository\n               .createMessage(this, newMessage)\n               .pipe(\n                 map(message => {\n                   this.addMessage(message);\n                   return message;\n                 })\n               );\n  }\n\n  removeMessage(messageToDelete: Message): Message {\n    const index = ArrayUtils.findIndex(this.messages, message => message.id === messageToDelete.id);\n    if (index > -1) {\n      this.messages.splice(index, 1);\n    }\n    return messageToDelete;\n  }\n\n  delete(message: Message): Observable<Message> {\n    return this.roomRepository\n               .deleteMessage(this, message)\n               .pipe(map(deletedMessage => this.removeMessage(deletedMessage)));\n  }\n\n  replaceUsersWith(room: Room): Room {\n    this.users.splice(0, this.users.length);\n    Array.prototype.push.apply(this.users, room.users);\n    return this;\n  }\n\n  addUser(user: User) {\n    if (!this.hasUser(user.id)) {\n      this.users.push(user);\n    }\n  }\n}\n","import { HttpClient } from \"@angular/common/http\";\nimport { Inject, Injectable } from \"@angular/core\";\nimport { Observable, of } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { URL_CONFIGURATION, UrlConfiguration } from \"../configuration/url-configuration.types\";\nimport { MessageRepository, NewMessage } from \"../message/message.repository\";\nimport { User } from \"../user/user.types\";\nimport { Message } from \"./../message/message.types\";\nimport { Room } from \"./room.types\";\n\n@Injectable()\nexport class RoomRepository {\n\n  private roomUrl: string;\n\n  constructor(private http: HttpClient,\n              private messageRepository: MessageRepository,\n              @Inject(URL_CONFIGURATION) configuration: UrlConfiguration) {\n    this.roomUrl = `${configuration.apiUrl}/user/rooms`;\n  }\n\n  find(id: string): Observable<Room> {\n    return this.http.get(`${this.roomUrl}/${id}`)\n                    .pipe(map((json: any) => Room.build(json.data, this, this.messageRepository)));\n  }\n\n  findAll(query: {[param: string]: string | string[] }): Observable<Room[]> {\n    return this.http.get(this.roomUrl, { params: query })\n                    .pipe(map((json: any) => Room.map(json.data, this, this.messageRepository)));\n  }\n\n  findOpenedRooms(): Observable<Room[]> {\n    return this.findAll({ onlyOpened: \"true\" });\n  }\n\n  findClosedRooms(): Observable<Room[]> {\n    return this.findAll({ onlyClosed: \"true\" });\n  }\n\n  findRoomsAfter(id: string): Observable<Room[]> {\n    return this.findAll({ firstSeenRoomId: id });\n  }\n\n  findRoomsByIds(roomIds: string[]) {\n    return this.findAll({ \"roomIds[]\": roomIds });\n  }\n\n  updateMembership(room: Room, open: boolean): Observable<Room> {\n    return this.http.put(`${this.roomUrl}/${room.id}/membership`, {\n      data: {\n        type: \"membership\",\n        attributes: {\n          open: open\n        }\n      }\n    }).pipe(map((data: any) => {\n      room.open = data.data.attributes.open;\n      return room;\n    }));\n  }\n\n  markAllReceivedMessagesAsRead(room: Room): Observable<number> {\n    if (room.unreadMessageCount > 0) {\n      const lastReadMessageId = room.messages.length > 0 ? room.messages[room.messages.length - 1].id : undefined;\n      return this.http.put(`${this.roomUrl}/${room.id}/membership/unread-messages`, { data: { lastReadMessageId: lastReadMessageId } })\n                      .pipe(map((data: any) => {\n                        room.unreadMessageCount = 0;\n                        return data.meta.count;\n                      }));\n    } else {\n      return of(0);\n    }\n  }\n\n  create(name: string, userIds: string[], withoutDuplicate: boolean): Observable<Room> {\n    return this.http.post(`${this.roomUrl}?noDuplicate=${withoutDuplicate}`, {\n      data: {\n        type: \"room\",\n        attributes: {\n          name: name\n        },\n        relationships: {\n          users: {\n            data: userIds.map(userId => ({ type: \"user\", id: userId }) )\n          }\n        }\n      }\n    }, {\n      params: {\n        noDuplicate: `${withoutDuplicate}`\n      }\n    }).pipe(map((response: any) => Room.build(response.data, this, this.messageRepository)));\n  }\n\n  update(room: Room): Observable<Room> {\n    return this.http.put(`${this.roomUrl}/${room.id}`, {\n      data: {\n        type: \"room\",\n        attributes: {\n          name: room.name\n        }\n      }\n    }).pipe(map((response: any) => {\n      room.name = response.data.attributes.name;\n      return room;\n    }));\n  }\n\n  addUser(room: Room, userId: string): Observable<Room> {\n    return this.http.post(`${this.roomUrl}/${room.id}/memberships`, {\n      data: {\n        type: \"membership\",\n        relationships: {\n          user: {\n            data: {\n              type: \"user\",\n              id: userId\n            }\n          }\n        }\n      }\n    }).pipe(map((response: any) => {\n      const newUser = User.build(response.data.relationships.user.data);\n      room.addUser(newUser);\n      return room;\n    }));\n  }\n\n  deleteMessage(room: Room, message: Message): Observable<Message> {\n    return this.messageRepository.delete(room, message);\n  }\n\n  findMessages(room: Room, attributes: {[param: string]: string | string[]}): Observable<Message[]> {\n    return this.messageRepository.findAll(room, attributes);\n  }\n\n  createMessage(room: Room, attributes: NewMessage): Observable<Message> {\n    return this.messageRepository.create(room, attributes);\n  }\n}\n","import * as momentLoaded from \"moment\";\nimport { BehaviorSubject, Observable, of } from \"rxjs\";\nimport { flatMap, map } from \"rxjs/operators\";\nimport { ArrayUtils } from \"../array.utils\";\nimport { Room } from \"../room/room.types\";\nimport { User } from \"../user/user.types\";\nimport { Message } from \"./../message/message.types\";\nimport { RoomRepository } from \"./../room/room.repository\";\nconst moment = momentLoaded;\n\nexport class Me {\n\n  static build(json: any, roomRepository: RoomRepository): Me {\n    const unreadMessageCount = json.data && json.data.meta ? json.data.meta.unreadMessageCount : 0;\n    const roomCount = json.data && json.data.meta ? json.data.meta.roomCount : 0;\n    return new Me(json.data.id, [], [], unreadMessageCount, roomCount, roomRepository);\n  }\n\n  public deviceSessionId: string;\n  private internalUnreadMessageCount: BehaviorSubject<number>;\n  private internalRoomCount: BehaviorSubject<number>;\n  private firstSeenRoom: Room;\n\n  constructor(readonly id: string,\n              readonly openedRooms: Room[],\n              readonly rooms: Room[],\n              unreadMessageCount: number,\n              roomCount: number,\n              private roomRepository: RoomRepository) {\n    this.internalUnreadMessageCount = new BehaviorSubject(unreadMessageCount || 0);\n    this.internalRoomCount = new BehaviorSubject(roomCount || 0);\n  }\n\n\n  get unreadMessageCount(): number {\n    return this.internalUnreadMessageCount.value;\n  }\n\n  set unreadMessageCount(count: number) {\n    this.internalUnreadMessageCount.next(count);\n  }\n\n  get observableUnreadMessageCount(): BehaviorSubject<number> {\n    return this.internalUnreadMessageCount;\n  }\n\n  get roomCount(): number {\n    return this.internalRoomCount.value;\n  }\n\n  get observableRoomCount(): BehaviorSubject<number> {\n    return this.internalRoomCount;\n  }\n\n  fetchOpenedRooms(): Observable<Room[]> {\n    return this.roomRepository.findOpenedRooms().pipe(map(rooms => {\n      this.addRooms(rooms);\n      return rooms;\n    }));\n  }\n\n  fetchClosedRooms(): Observable<Room[]> {\n    return this.roomRepository.findClosedRooms().pipe(map(rooms => {\n      this.addRooms(rooms);\n      return rooms;\n    }));\n  }\n\n  fetchMoreRooms(): Observable<Room[]> {\n    if (this.firstSeenRoom) {\n      return this.roomRepository.findRoomsAfter(this.firstSeenRoom.id).pipe(map(rooms => {\n        this.addRooms(rooms);\n        return rooms;\n      }));\n    } else {\n      return of([]);\n    }\n  }\n\n  fetchRoomsById(roomIds: string[]): Observable<Room[]> {\n    return this.roomRepository.findRoomsByIds(roomIds).pipe(map(rooms => {\n      this.addRooms(rooms);\n      return rooms;\n    }));\n  }\n\n  fetchRoomById(roomId: string): Observable<Room> {\n    return this.roomRepository.find(roomId).pipe(map(room => {\n      this.addRoom(room);\n      return room;\n    }));\n  }\n\n  findOrFetchRoomById(roomId: string): Observable<Room> {\n    const room = this.findRoomById(roomId);\n    if (roomId) {\n      return of(room);\n    } else {\n      return this.fetchRoomById(roomId);\n    }\n  }\n\n  handleNewMessage(newMessage: Message) {\n    this.findOrFetchRoomById(newMessage.roomId)\n        .subscribe(room => {\n          if (room) {\n            room.addMessage(newMessage);\n            room.notifyNewMessage(newMessage);\n            if (!newMessage.hasSenderId(this.id)) {\n              this.unreadMessageCount = this.unreadMessageCount + 1;\n              if (!room.open) {\n                room.unreadMessageCount = room.unreadMessageCount + 1;\n              }\n            }\n          }\n        });\n  }\n\n  addRoom(newRoom: Room) {\n    if (!this.hasRoom(newRoom)) {\n      if (!this.firstSeenRoom || moment(this.firstSeenRoom.lastActivityAt).isAfter(newRoom.lastActivityAt)) {\n        this.firstSeenRoom = newRoom;\n      }\n\n      const roomIndex = ArrayUtils.findIndex(this.rooms, room => room.id === newRoom.id);\n      if (roomIndex > -1) {\n        this.rooms[roomIndex] = newRoom;\n      } else {\n        this.rooms.push(newRoom);\n      }\n    }\n  }\n\n  findRoomById(roomId: string): Room {\n    return ArrayUtils.find(this.rooms, room => roomId === room.id);\n  }\n\n  openRoom(room: Room): Observable<Room> {\n    if (!this.hasRoomOpened(room)) {\n      return room.openMembership()\n                 .pipe(flatMap((openedRoom: Room) => {\n                   this.addToOpenedRoom(openedRoom);\n                   return this.markAllReceivedMessagesAsRead(openedRoom);\n                 }));\n    } else {\n      return of(room);\n    }\n  }\n\n  closeRoom(room: Room): Observable<Room> {\n    if (this.hasRoomOpened(room)) {\n      return room.closeMembership()\n                 .pipe(map(closedRoom => {\n                    this.removeFromOpenedRoom(closedRoom);\n                    return closedRoom;\n                  }));\n    } else {\n      return of(room);\n    }\n  }\n\n  closeRooms(roomsToClose: Room[]): Observable<Room[]> {\n    return of(roomsToClose).pipe(\n      map(rooms => {\n        rooms.forEach(room => this.closeRoom(room));\n        return rooms;\n      })\n    );\n  }\n\n  openRoomAndCloseOthers(roomToOpen: Room): Observable<Room> {\n    const roomsToBeClosed = this.openedRooms.filter(room => room.id !== roomToOpen.id);\n    return this.closeRooms(roomsToBeClosed).pipe(flatMap(rooms => this.openRoom(roomToOpen)));\n  }\n\n  hasOpenedRooms(): boolean {\n    return this.openedRooms.length > 0;\n  }\n\n  createRoom(name: string, userIds: string[], withoutDuplicate: boolean): Observable<Room> {\n    return this.roomRepository.create(name, userIds, withoutDuplicate)\n                              .pipe(map(room => {\n                                this.addRoom(room);\n                                return room;\n                              }));\n  }\n\n  buildRoom(userIds: string[]): Room {\n    const users = userIds.map(id => new User(id, \"\"));\n    const noSenders = [];\n    const noMessage = [];\n    const noMessageUnread = 0;\n    const noId = undefined;\n    const initiator = this.toUser();\n    return new Room(noId,\n      undefined,\n      undefined,\n      true,\n      noMessageUnread,\n      users,\n      noSenders,\n      noMessage,\n      initiator,\n      this.roomRepository\n     );\n  }\n\n  sendMessage(room: Room, content: string, contentType: string): Observable<Message> {\n    return room.sendMessage({\n      content: content,\n      contentType: contentType,\n      deviceSessionId: this.deviceSessionId\n    });\n  }\n\n  isSentByMe(message: Message) {\n    return message && message.hasSenderId(this.id);\n  }\n\n  deleteMessage(message: Message): Observable<Message> {\n    if (message) {\n      const room = this.findRoomById(message.roomId);\n      if (room) {\n        return room.delete(message);\n      } else {\n        return of(undefined);\n      }\n    } else {\n      return of(undefined);\n    }\n  }\n\n  addUserTo(room: Room, userId: string): Observable<Room> {\n    return this.roomRepository.addUser(room, userId);\n  }\n\n  private addRooms(rooms: Room[]) {\n    rooms.forEach(room => {\n      this.addRoom(room);\n      if (room.open && !this.hasRoomOpened(room)) {\n        this.openedRooms.push(room);\n      }\n    });\n  }\n\n  private hasRoom(roomToFind: Room): boolean {\n    return this.findRoom(roomToFind) !== undefined;\n  }\n\n  private hasRoomOpened(roomToFind: Room): boolean {\n    return this.findRoomOpened(roomToFind) !== undefined;\n  }\n\n  private findRoom(room: Room): Room {\n    return this.findRoomById(room.id);\n  }\n\n  private findRoomOpened(roomToFind: Room): Room {\n    return ArrayUtils.find(this.openedRooms, room => roomToFind.id === room.id);\n  }\n\n  private addToOpenedRoom(room: Room) {\n    if (!this.hasRoomOpened(room)) {\n      this.openedRooms.push(room);\n    }\n  }\n\n  private removeFromOpenedRoom(closedRoom: Room) {\n    if (this.hasRoomOpened(closedRoom)) {\n      const roomIndex = ArrayUtils.findIndex(this.openedRooms, room => room.id === closedRoom.id);\n      this.openedRooms.splice(roomIndex, 1);\n    }\n  }\n\n  private markAllReceivedMessagesAsRead(room: Room): Observable<Room> {\n    return room.markAllMessagesAsRead()\n               .pipe(map(readMessageCount => {\n                  this.unreadMessageCount = Math.max(this.unreadMessageCount - readMessageCount, 0);\n                  return room;\n                }));\n  }\n\n  private toUser(): User {\n    return new User(this.id, \"\");\n  }\n}\n","import { HttpClient } from \"@angular/common/http\";\nimport { Inject, Injectable } from \"@angular/core\";\nimport { empty, Observable } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { URL_CONFIGURATION, UrlConfiguration } from \"../configuration/url-configuration.types\";\nimport { RoomRepository } from \"./../room/room.repository\";\nimport { Me } from \"./me.types\";\n\n@Injectable()\nexport class MeRepository {\n\n  private userUrl: string;\n  private aliveUrl: string;\n\n  constructor(private http: HttpClient,\n              private roomRepository: RoomRepository,\n              @Inject(URL_CONFIGURATION) configuration: UrlConfiguration) {\n    this.userUrl = `${configuration.apiUrl}/user`;\n    this.aliveUrl = `${this.userUrl}/alive`;\n  }\n\n  findMe(): Observable<Me> {\n    return this.http.get(this.userUrl).pipe(map(me => Me.build(me, this.roomRepository)));\n  }\n\n  updateAliveness(me: Me): Observable<void> {\n    return this.http.put(this.aliveUrl, { data: { type: \"alive\" }})\n                    .pipe(catchError(() => empty()), map(() => null));\n  }\n}\n\n","import { Inject, Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport * as io from \"socket.io-client\";\nimport { URL_CONFIGURATION, UrlConfiguration } from \"./../configuration/url-configuration.types\";\n\n\n\n@Injectable()\nexport class BootstrapSocket {\n\n  private socket: SocketIOClient.Socket;\n\n  constructor(@Inject(URL_CONFIGURATION) private configuration: UrlConfiguration) {}\n\n  connect(token: string): SocketIOClient.Socket {\n    this.socket = io.connect(this.configuration.socketUrl, {\n      forceNew: true,\n      query: `token=${token}`\n    });\n    return this.socket;\n  }\n\n  socketExists(): boolean {\n    return this.socket !== undefined;\n  }\n\n  disconnect() {\n    if (this.socketExists()) {\n      this.socket.close();\n      this.socket = undefined;\n    }\n  }\n}\n","import { HttpClient } from \"@angular/common/http\";\nimport { Inject, Injectable } from \"@angular/core\";\nimport { Observable, timer } from \"rxjs\";\nimport { map, publishReplay, refCount, share, takeWhile } from \"rxjs/operators\";\nimport { Room } from \"../room/room.types\";\nimport { TokenConfiguration } from \"./../configuration/token-configuration.types\";\nimport { URL_CONFIGURATION, UrlConfiguration } from \"./../configuration/url-configuration.types\";\nimport { Message } from \"./../message/message.types\";\nimport { BootstrapSocket } from \"./../socket/bootstrap.socket\";\nimport { MeRepository } from \"./me.repository\";\nimport { Me } from \"./me.types\";\n\n@Injectable()\nexport class MeService {\n\n  private cachedMe: Observable<Me>;\n  private alive: boolean;\n\n  constructor(private meRepository: MeRepository,\n              private socketClient: BootstrapSocket,\n              @Inject(URL_CONFIGURATION) private configuration: UrlConfiguration,\n              private tokenConfiguration: TokenConfiguration) {\n    this.alive = false;\n  }\n\n  setup(token: string): void {\n    if (!this.tokenConfiguration.isApiTokenSet()) {\n      this.tokenConfiguration.apiToken = token;\n    }\n  }\n\n  me(): Observable<Me> {\n    if (!this.hasCachedMe()) {\n      this.cachedMe = this.meRepository\n                          .findMe()\n                          .pipe(\n                            map(me => this.scheduleAliveness(me)),\n                            publishReplay(1),\n                            refCount(),\n                            share()\n                          );\n    }\n    return this.cachedMe.pipe(map(me => this.connectSocket(me)));\n  }\n\n  clear() {\n    this.tokenConfiguration.clear();\n    this.cachedMe = undefined;\n    this.alive = false;\n  }\n\n  private scheduleAliveness(me: Me): Me {\n    this.alive = true;\n    timer(0, this.configuration.aliveIntervalInMs).pipe(\n      takeWhile(() => this.alive)\n    )\n    .subscribe(() => this.meRepository.updateAliveness(me));\n    return me;\n  }\n\n  private hasCachedMe(): boolean {\n    return this.cachedMe !== undefined;\n  }\n\n  private connectSocket(me: Me): Me {\n    if (!this.socketClient.socketExists()) {\n      const socket = this.socketClient.connect(this.tokenConfiguration.apiToken);\n      socket.on(\"new message\", data => this.receiveNewMessage(data));\n      socket.on(\"connected\", data => me.deviceSessionId = data.deviceSessionId);\n    }\n    return me;\n  }\n\n  private receiveNewMessage(json: any) {\n    const message = Message.build(json.data);\n    this.me().subscribe(me => me.handleNewMessage(message));\n  }\n}\n","import { Pipe, PipeTransform } from \"@angular/core\";\nimport * as momentLoaded from \"moment\";\nimport { Room } from \"../room/room.types\";\nconst moment = momentLoaded;\n\n@Pipe({\n  name: \"sortRooms\"\n})\nexport class SortRoomPipe  implements PipeTransform {\n  transform(rooms: Room[], field: string): any[] {\n    if (rooms !== undefined && rooms !== null) {\n      return rooms.sort((room: Room, otherRoom: Room) => {\n        const lastActivityAt      = room.lastActivityAt;\n        const otherLastActivityAt = otherRoom.lastActivityAt;\n        if (moment(lastActivityAt).isBefore(otherLastActivityAt)) {\n          return 1;\n        } else if (moment(otherLastActivityAt).isBefore(lastActivityAt)) {\n          return -1;\n        } else {\n          return 0;\n        }\n      });\n    } else {\n      return rooms;\n    }\n  }\n}\n","import { HTTP_INTERCEPTORS, HttpClientModule } from \"@angular/common/http\";\nimport { ModuleWithProviders, NgModule } from \"@angular/core\";\nimport { HttpAuthenticationInterceptor } from \"./authentication/http-authentication-interceptor\";\nimport { TokenConfiguration } from \"./configuration/token-configuration.types\";\nimport { URL_CONFIGURATION, UrlConfiguration } from \"./configuration/url-configuration.types\";\nimport { MeRepository } from \"./me/me.repository\";\nimport { MeService } from \"./me/me.service\";\nimport { MessageRepository } from \"./message/message.repository\";\nimport { SortRoomPipe } from \"./pipe/sort-room\";\nimport { RoomRepository } from \"./room/room.repository\";\nimport { BootstrapSocket } from \"./socket/bootstrap.socket\";\n\n@NgModule({\n  imports: [\n    HttpClientModule\n  ],\n  declarations: [\n    SortRoomPipe\n  ]\n })\nexport class BabiliModule {\n  static forRoot(urlConfiguration: UrlConfiguration): ModuleWithProviders {\n    return {\n      ngModule: BabiliModule,\n      providers: [\n        {\n          provide: URL_CONFIGURATION,\n          useValue: urlConfiguration\n        },\n        SortRoomPipe,\n        TokenConfiguration,\n        BootstrapSocket,\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: HttpAuthenticationInterceptor,\n          multi: true\n        },\n        MessageRepository,\n        RoomRepository,\n        MeRepository,\n        MeService\n      ]\n    };\n  }\n}\n"],"names":["moment","io.connect"],"mappings":"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"}
