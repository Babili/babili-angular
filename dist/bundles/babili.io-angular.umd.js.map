{"version":3,"file":"babili.io-angular.umd.js.map","sources":["ng://@babili.io/angular/configuration/babili.configuration.ts","ng://@babili.io/angular/configuration/token-configuration.types.ts","ng://@babili.io/angular/authentication/not-authorized-error.ts","ng://@babili.io/angular/authentication/http-authentication-interceptor.ts","ng://@babili.io/angular/user/user.types.ts","ng://@babili.io/angular/message/message.types.ts","ng://@babili.io/angular/message/message.repository.ts","ng://@babili.io/angular/room/room.types.ts","ng://@babili.io/angular/room/room.repository.ts","ng://@babili.io/angular/me/me.types.ts","ng://@babili.io/angular/me/me.repository.ts","ng://@babili.io/angular/socket/bootstrap.socket.ts","ng://@babili.io/angular/me/me.service.ts","ng://@babili.io/angular/pipe/sort-room.ts","ng://@babili.io/angular/babili.module.ts"],"sourcesContent":["import { Injectable, Injector } from \"@angular/core\";\nimport { BabiliUrlConfiguration } from \"./url-configuration.types\";\n\n@Injectable()\nexport class BabiliConfiguration {\n\n  private url: BabiliUrlConfiguration;\n\n  init(apiUrl: string, socketUrl: string, aliveIntervalInMs?: number) {\n    this.url = {\n      apiUrl: apiUrl,\n      socketUrl: socketUrl,\n      aliveIntervalInMs: aliveIntervalInMs\n    };\n  }\n\n  get apiUrl(): string {\n    return this.url ? this.url.apiUrl : undefined;\n  }\n\n  get socketUrl(): string {\n    return this.url ? this.url.socketUrl : undefined;\n  }\n\n  get aliveIntervalInMs(): number {\n    return this.url ? this.url.aliveIntervalInMs : 30000;\n  }\n}\n","import { Injectable } from \"@angular/core\";\n\n@Injectable()\nexport class TokenConfiguration {\n  public apiToken: string;\n\n  constructor() {}\n\n  isApiTokenSet(): boolean {\n    return this.apiToken !== undefined && this.apiToken !== null && this.apiToken !== \"\";\n  }\n\n  clear() {\n    this.apiToken = undefined;\n  }\n\n}\n","export class NotAuthorizedError {\n  constructor(readonly error: any) {}\n}\n","import { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { BabiliConfiguration } from \"../configuration/babili.configuration\";\nimport { Observable, throwError } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport { TokenConfiguration } from \"./../configuration/token-configuration.types\";\nimport { NotAuthorizedError } from \"./not-authorized-error\";\n\n@Injectable()\nexport class HttpAuthenticationInterceptor implements HttpInterceptor {\n\n  constructor(private configuration: BabiliConfiguration,\n              private tokenConfiguration: TokenConfiguration) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (this.shouldAddHeaderTo(request)) {\n      return next.handle(this.addHeaderTo(request, this.tokenConfiguration.apiToken))\n                 .pipe(catchError(error => {\n                   if (error instanceof HttpErrorResponse && error.status === 401) {\n                     return throwError(new NotAuthorizedError(error));\n                   } else {\n                     return throwError(error);\n                   }\n                 }));\n    } else {\n      return next.handle(request);\n    }\n  }\n\n  private addHeaderTo(request: HttpRequest<any>, token: string): HttpRequest<any> {\n    return request.clone({\n      headers: request.headers.set(\"Authorization\", `Bearer ${token}`)\n    });\n  }\n\n  private shouldAddHeaderTo(request: HttpRequest<any>): boolean {\n    return request.url.startsWith(this.configuration.apiUrl);\n  }\n}\n","export class User {\n  static build(json: any): User {\n    if (json) {\n      return new User(json.id, json.attributes ? json.attributes.status : undefined);\n    } else {\n      return undefined;\n    }\n  }\n\n  static map(json: any): User[] {\n    if (json) {\n      return json.map(User.build);\n    } else {\n      return undefined;\n    }\n  }\n\n  constructor(readonly id: string,\n              readonly status: string) {}\n}\n","import * as momentLoaded from \"moment\";\nconst moment = momentLoaded;\n\nimport { User } from \"../user/user.types\";\n\nexport class Message {\n\n  static build(json: any): Message {\n    const attributes = json.attributes;\n    return new Message(json.id,\n                        attributes.content,\n                        attributes.contentType,\n                        moment(attributes.createdAt).toDate(),\n                        json.relationships.sender ? User.build(json.relationships.sender.data) : undefined,\n                        json.relationships.room.data.id);\n  }\n\n  static map(json: any): Message[] {\n    if (json) {\n      return json.map(Message.build);\n    } else {\n      return undefined;\n    }\n  }\n\n  constructor(readonly id: string,\n              readonly content: string,\n              readonly contentType: string,\n              readonly createdAt: Date,\n              readonly sender: User,\n              readonly roomId: string) {}\n\n  hasSenderId(userId: string) {\n    return this.sender && this.sender.id === userId;\n  }\n}\n","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { BabiliConfiguration } from \"../configuration/babili.configuration\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { Room } from \"../room/room.types\";\nimport { Message } from \"./message.types\";\n\nexport class NewMessage {\n  content: string;\n  contentType: string;\n  deviceSessionId: string;\n}\n\n@Injectable()\nexport class MessageRepository {\n\n  constructor(private http: HttpClient,\n              private configuration: BabiliConfiguration) {}\n\n  create(room: Room, attributes: NewMessage): Observable<Message> {\n    return this.http.post(this.messageUrl(room.id), {\n      data: {\n        type: \"message\",\n        attributes: attributes\n      }\n    }).pipe(map((response: any) => Message.build(response.data)));\n  }\n\n  findAll(room: Room, attributes: {[param: string]: string | string[]}): Observable<Message[]> {\n    return this.http.get(this.messageUrl(room.id), { params: attributes })\n                    .pipe(map((response: any) => Message.map(response.data)));\n  }\n\n  delete(room: Room, message: Message): Observable<Message> {\n    return this.http.delete(`${this.messageUrl(room.id)}/${message.id}`)\n                    .pipe(map(response => message));\n  }\n\n  private messageUrl(roomId: string) {\n    return `${this.roomUrl}/${roomId}/messages`;\n  }\n\n  private get roomUrl(): string {\n    return `${this.configuration.apiUrl}/user/rooms`;\n  }\n}\n","import * as momentLoaded from \"moment\";\nimport { BehaviorSubject, Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { Message } from \"../message/message.types\";\nimport { User } from \"../user/user.types\";\nimport { MessageRepository, NewMessage } from \"./../message/message.repository\";\nimport { RoomRepository } from \"./room.repository\";\nconst moment = momentLoaded;\n\nexport class Room {\n\n  static build(json: any, roomRepository: RoomRepository, messageRepository: MessageRepository): Room {\n    const attributes = json.attributes;\n    const users = json.relationships && json.relationships.users ? User.map(json.relationships.users.data) : [];\n    const senders = json.relationships && json.relationships.senders ? User.map(json.relationships.senders.data) : [];\n    const messages = json.relationships && json.relationships.messages ? Message.map(json.relationships.messages.data) : [];\n    const initiator = json.relationships && json.relationships.initiator ? User.build(json.relationships.initiator.data) : undefined;\n    return new Room(json.id,\n                    attributes.name,\n                    attributes.lastActivityAt ? moment(attributes.lastActivityAt).utc().toDate() : undefined,\n                    attributes.open,\n                    attributes.unreadMessageCount,\n                    users,\n                    senders,\n                    messages,\n                    initiator,\n                    roomRepository);\n  }\n\n  static map(json: any, roomRepository: RoomRepository, messageRepository: MessageRepository): Room[] {\n    if (json) {\n      return json.map(room => Room.build(room, roomRepository, messageRepository));\n    } else {\n      return undefined;\n    }\n  }\n\n  newMessageNotifier: (message: Message) => any;\n  private internalOpen: BehaviorSubject<boolean>;\n  private internalUnreadMessageCount: BehaviorSubject<number>;\n  private internalName: BehaviorSubject<string>;\n  private internalLastActivityAt: BehaviorSubject<Date>;\n  private internalImageUrl: BehaviorSubject<string>;\n\n  constructor(readonly id: string,\n              name: string,\n              lastActivityAt: Date,\n              open: boolean,\n              unreadMessageCount: number,\n              readonly users: User[],\n              readonly senders: User[],\n              readonly messages: Message[],\n              readonly initiator: User,\n              private roomRepository: RoomRepository) {\n    this.internalOpen = new BehaviorSubject(open);\n    this.internalLastActivityAt = new BehaviorSubject(lastActivityAt);\n    this.internalName = new BehaviorSubject(name);\n    this.internalUnreadMessageCount = new BehaviorSubject(unreadMessageCount);\n    this.internalImageUrl = new BehaviorSubject(undefined);\n  }\n\n  get unreadMessageCount(): number {\n    return this.internalUnreadMessageCount.value;\n  }\n\n  set unreadMessageCount(count: number) {\n    this.internalUnreadMessageCount.next(count);\n  }\n\n  get observableUnreadMessageCount(): BehaviorSubject<number> {\n    return this.internalUnreadMessageCount;\n  }\n\n  get name(): string {\n    return this.internalName.value;\n  }\n\n  set name(name: string) {\n    this.internalName.next(name);\n  }\n\n  get observableName(): BehaviorSubject<string> {\n    return this.internalName;\n  }\n\n  get open(): boolean {\n    return this.internalOpen.value;\n  }\n\n  set open(open: boolean) {\n    this.internalOpen.next(open);\n  }\n\n  get observableOpen(): BehaviorSubject<boolean> {\n    return this.internalOpen;\n  }\n\n  get lastActivityAt(): Date {\n    return this.internalLastActivityAt.value;\n  }\n\n  set lastActivityAt(lastActivityAt: Date) {\n    this.internalLastActivityAt.next(lastActivityAt);\n  }\n\n  get observableLastActivityAt(): BehaviorSubject<Date> {\n    return this.internalLastActivityAt;\n  }\n\n  get imageUrl(): string {\n    return this.internalImageUrl.value;\n  }\n\n  set imageUrl(imageUrl: string) {\n    this.internalImageUrl.next(imageUrl);\n  }\n\n  get observableImageUrl(): BehaviorSubject<string> {\n    return this.internalImageUrl;\n  }\n\n\n  openMembership(): Observable<Room> {\n    return this.roomRepository.updateMembership(this, true);\n  }\n\n  closeMembership(): Observable<Room> {\n    return this.roomRepository.updateMembership(this, false);\n  }\n\n  markAllMessagesAsRead(): Observable<number> {\n    return this.roomRepository.markAllReceivedMessagesAsRead(this);\n  }\n\n  addMessage(message: Message) {\n    this.messages.push(message);\n    this.lastActivityAt = message.createdAt;\n  }\n\n  notifyNewMessage(message: Message) {\n    if (this.newMessageNotifier) {\n      this.newMessageNotifier.apply(message);\n    }\n  }\n\n\n  hasUser(userId: string): boolean {\n    return this.users && this.users.some(user => user.id  === userId);\n  }\n\n  fetchMoreMessage(): Observable<Message[]> {\n    const params = {\n      firstSeenMessageId: this.messages.length > 0 ? this.messages[0].id : undefined\n    };\n    return this.roomRepository\n               .findMessages(this, params)\n               .pipe(\n      map(messages => {\n        this.messages.unshift.apply(this.messages, messages);\n        return messages;\n      })\n    );\n  }\n\n  findMessageWithId(id: string): Message {\n    return this.messages ? this.messages.find(message => message.id === id) : undefined;\n  }\n\n  update(): Observable<Room> {\n    return this.roomRepository.update(this);\n  }\n\n  sendMessage(newMessage: NewMessage): Observable<Message> {\n    return this.roomRepository\n               .createMessage(this, newMessage)\n               .pipe(\n                 map(message => {\n                   this.addMessage(message);\n                   return message;\n                 })\n               );\n  }\n\n  removeMessage(messageToDelete: Message): Message {\n    const index = this.messages ? this.messages.findIndex(message => message.id === messageToDelete.id) : -1;\n    if (index > -1) {\n      this.messages.splice(index, 1);\n    }\n    return messageToDelete;\n  }\n\n  delete(message: Message): Observable<Message> {\n    return this.roomRepository\n               .deleteMessage(this, message)\n               .pipe(map(deletedMessage => this.removeMessage(deletedMessage)));\n  }\n\n  replaceUsersWith(room: Room): Room {\n    this.users.splice(0, this.users.length);\n    Array.prototype.push.apply(this.users, room.users);\n    return this;\n  }\n\n  addUser(user: User) {\n    if (!this.hasUser(user.id)) {\n      this.users.push(user);\n    }\n  }\n}\n","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { BabiliConfiguration } from \"../configuration/babili.configuration\";\nimport { Observable, of } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { MessageRepository, NewMessage } from \"../message/message.repository\";\nimport { User } from \"../user/user.types\";\nimport { Message } from \"./../message/message.types\";\nimport { Room } from \"./room.types\";\n\n@Injectable()\nexport class RoomRepository {\n\n  constructor(private http: HttpClient,\n              private messageRepository: MessageRepository,\n              private configuration: BabiliConfiguration) {}\n\n  find(id: string): Observable<Room> {\n    return this.http.get(`${this.roomUrl}/${id}`)\n                    .pipe(map((json: any) => Room.build(json.data, this, this.messageRepository)));\n  }\n\n  findAll(query: {[param: string]: string | string[] }): Observable<Room[]> {\n    return this.http.get(this.roomUrl, { params: query })\n                    .pipe(map((json: any) => Room.map(json.data, this, this.messageRepository)));\n  }\n\n  findOpenedRooms(): Observable<Room[]> {\n    return this.findAll({ onlyOpened: \"true\" });\n  }\n\n  findClosedRooms(): Observable<Room[]> {\n    return this.findAll({ onlyClosed: \"true\" });\n  }\n\n  findRoomsAfter(id: string): Observable<Room[]> {\n    return this.findAll({ firstSeenRoomId: id });\n  }\n\n  findRoomsByIds(roomIds: string[]) {\n    return this.findAll({ \"roomIds[]\": roomIds });\n  }\n\n  updateMembership(room: Room, open: boolean): Observable<Room> {\n    return this.http.put(`${this.roomUrl}/${room.id}/membership`, {\n      data: {\n        type: \"membership\",\n        attributes: {\n          open: open\n        }\n      }\n    }).pipe(map((data: any) => {\n      room.open = data.data.attributes.open;\n      return room;\n    }));\n  }\n\n  markAllReceivedMessagesAsRead(room: Room): Observable<number> {\n    if (room.unreadMessageCount > 0) {\n      const lastReadMessageId = room.messages.length > 0 ? room.messages[room.messages.length - 1].id : undefined;\n      return this.http.put(`${this.roomUrl}/${room.id}/membership/unread-messages`, { data: { lastReadMessageId: lastReadMessageId } })\n                      .pipe(map((data: any) => {\n                        room.unreadMessageCount = 0;\n                        return data.meta.count;\n                      }));\n    } else {\n      return of(0);\n    }\n  }\n\n  create(name: string, userIds: string[], withoutDuplicate: boolean): Observable<Room> {\n    return this.http.post(`${this.roomUrl}?noDuplicate=${withoutDuplicate}`, {\n      data: {\n        type: \"room\",\n        attributes: {\n          name: name\n        },\n        relationships: {\n          users: {\n            data: userIds.map(userId => ({ type: \"user\", id: userId }) )\n          }\n        }\n      }\n    }, {\n      params: {\n        noDuplicate: `${withoutDuplicate}`\n      }\n    }).pipe(map((response: any) => Room.build(response.data, this, this.messageRepository)));\n  }\n\n  update(room: Room): Observable<Room> {\n    return this.http.put(`${this.roomUrl}/${room.id}`, {\n      data: {\n        type: \"room\",\n        attributes: {\n          name: room.name\n        }\n      }\n    }).pipe(map((response: any) => {\n      room.name = response.data.attributes.name;\n      return room;\n    }));\n  }\n\n  addUser(room: Room, userId: string): Observable<Room> {\n    return this.http.post(`${this.roomUrl}/${room.id}/memberships`, {\n      data: {\n        type: \"membership\",\n        relationships: {\n          user: {\n            data: {\n              type: \"user\",\n              id: userId\n            }\n          }\n        }\n      }\n    }).pipe(map((response: any) => {\n      const newUser = User.build(response.data.relationships.user.data);\n      room.addUser(newUser);\n      return room;\n    }));\n  }\n\n  deleteMessage(room: Room, message: Message): Observable<Message> {\n    return this.messageRepository.delete(room, message);\n  }\n\n  findMessages(room: Room, attributes: {[param: string]: string | string[]}): Observable<Message[]> {\n    return this.messageRepository.findAll(room, attributes);\n  }\n\n  createMessage(room: Room, attributes: NewMessage): Observable<Message> {\n    return this.messageRepository.create(room, attributes);\n  }\n\n  private get roomUrl(): string {\n    return `${this.configuration.apiUrl}/user/rooms`;\n  }\n}\n","import * as momentLoaded from \"moment\";\nimport { BehaviorSubject, Observable, of } from \"rxjs\";\nimport { flatMap, map } from \"rxjs/operators\";\nimport { Room } from \"../room/room.types\";\nimport { User } from \"../user/user.types\";\nimport { Message } from \"./../message/message.types\";\nimport { RoomRepository } from \"./../room/room.repository\";\nconst moment = momentLoaded;\n\nexport class Me {\n\n  static build(json: any, roomRepository: RoomRepository): Me {\n    const unreadMessageCount = json.data && json.data.meta ? json.data.meta.unreadMessageCount : 0;\n    const roomCount = json.data && json.data.meta ? json.data.meta.roomCount : 0;\n    return new Me(json.data.id, [], [], unreadMessageCount, roomCount, roomRepository);\n  }\n\n  public deviceSessionId: string;\n  private internalUnreadMessageCount: BehaviorSubject<number>;\n  private internalRoomCount: BehaviorSubject<number>;\n  private firstSeenRoom: Room;\n\n  constructor(readonly id: string,\n              readonly openedRooms: Room[],\n              readonly rooms: Room[],\n              unreadMessageCount: number,\n              roomCount: number,\n              private roomRepository: RoomRepository) {\n    this.internalUnreadMessageCount = new BehaviorSubject(unreadMessageCount || 0);\n    this.internalRoomCount = new BehaviorSubject(roomCount || 0);\n  }\n\n\n  get unreadMessageCount(): number {\n    return this.internalUnreadMessageCount.value;\n  }\n\n  set unreadMessageCount(count: number) {\n    this.internalUnreadMessageCount.next(count);\n  }\n\n  get observableUnreadMessageCount(): BehaviorSubject<number> {\n    return this.internalUnreadMessageCount;\n  }\n\n  get roomCount(): number {\n    return this.internalRoomCount.value;\n  }\n\n  get observableRoomCount(): BehaviorSubject<number> {\n    return this.internalRoomCount;\n  }\n\n  fetchOpenedRooms(): Observable<Room[]> {\n    return this.roomRepository.findOpenedRooms().pipe(map(rooms => {\n      this.addRooms(rooms);\n      return rooms;\n    }));\n  }\n\n  fetchClosedRooms(): Observable<Room[]> {\n    return this.roomRepository.findClosedRooms().pipe(map(rooms => {\n      this.addRooms(rooms);\n      return rooms;\n    }));\n  }\n\n  fetchMoreRooms(): Observable<Room[]> {\n    if (this.firstSeenRoom) {\n      return this.roomRepository.findRoomsAfter(this.firstSeenRoom.id).pipe(map(rooms => {\n        this.addRooms(rooms);\n        return rooms;\n      }));\n    } else {\n      return of([]);\n    }\n  }\n\n  fetchRoomsById(roomIds: string[]): Observable<Room[]> {\n    return this.roomRepository.findRoomsByIds(roomIds).pipe(map(rooms => {\n      this.addRooms(rooms);\n      return rooms;\n    }));\n  }\n\n  fetchRoomById(roomId: string): Observable<Room> {\n    return this.roomRepository.find(roomId).pipe(map(room => {\n      this.addRoom(room);\n      return room;\n    }));\n  }\n\n  findOrFetchRoomById(roomId: string): Observable<Room> {\n    const room = this.findRoomById(roomId);\n    if (roomId) {\n      return of(room);\n    } else {\n      return this.fetchRoomById(roomId);\n    }\n  }\n\n  handleNewMessage(newMessage: Message) {\n    this.findOrFetchRoomById(newMessage.roomId)\n        .subscribe(room => {\n          if (room) {\n            room.addMessage(newMessage);\n            room.notifyNewMessage(newMessage);\n            if (!newMessage.hasSenderId(this.id)) {\n              this.unreadMessageCount = this.unreadMessageCount + 1;\n              if (!room.open) {\n                room.unreadMessageCount = room.unreadMessageCount + 1;\n              }\n            }\n          }\n        });\n  }\n\n  addRoom(newRoom: Room) {\n    if (!this.hasRoom(newRoom)) {\n      if (!this.firstSeenRoom || moment(this.firstSeenRoom.lastActivityAt).isAfter(newRoom.lastActivityAt)) {\n        this.firstSeenRoom = newRoom;\n      }\n\n      const roomIndex = this.rooms ? this.rooms.findIndex(room => room.id === newRoom.id) : -1;\n      if (roomIndex > -1) {\n        this.rooms[roomIndex] = newRoom;\n      } else {\n        this.rooms.push(newRoom);\n      }\n    }\n  }\n\n  findRoomById(roomId: string): Room {\n    return this.rooms ? this.rooms.find(room => roomId === room.id) : undefined;\n  }\n\n  openRoom(room: Room): Observable<Room> {\n    if (!this.hasRoomOpened(room)) {\n      return room.openMembership()\n                 .pipe(flatMap((openedRoom: Room) => {\n                   this.addToOpenedRoom(openedRoom);\n                   return this.markAllReceivedMessagesAsRead(openedRoom);\n                 }));\n    } else {\n      return of(room);\n    }\n  }\n\n  closeRoom(room: Room): Observable<Room> {\n    if (this.hasRoomOpened(room)) {\n      return room.closeMembership()\n                 .pipe(map(closedRoom => {\n                    this.removeFromOpenedRoom(closedRoom);\n                    return closedRoom;\n                  }));\n    } else {\n      return of(room);\n    }\n  }\n\n  closeRooms(roomsToClose: Room[]): Observable<Room[]> {\n    return of(roomsToClose).pipe(\n      map(rooms => {\n        rooms.forEach(room => this.closeRoom(room));\n        return rooms;\n      })\n    );\n  }\n\n  openRoomAndCloseOthers(roomToOpen: Room): Observable<Room> {\n    const roomsToBeClosed = this.openedRooms.filter(room => room.id !== roomToOpen.id);\n    return this.closeRooms(roomsToBeClosed).pipe(flatMap(rooms => this.openRoom(roomToOpen)));\n  }\n\n  hasOpenedRooms(): boolean {\n    return this.openedRooms.length > 0;\n  }\n\n  createRoom(name: string, userIds: string[], withoutDuplicate: boolean): Observable<Room> {\n    return this.roomRepository.create(name, userIds, withoutDuplicate)\n                              .pipe(map(room => {\n                                this.addRoom(room);\n                                return room;\n                              }));\n  }\n\n  buildRoom(userIds: string[]): Room {\n    const users = userIds.map(id => new User(id, \"\"));\n    const noSenders = [];\n    const noMessage = [];\n    const noMessageUnread = 0;\n    const noId = undefined;\n    const initiator = this.toUser();\n    return new Room(noId,\n      undefined,\n      undefined,\n      true,\n      noMessageUnread,\n      users,\n      noSenders,\n      noMessage,\n      initiator,\n      this.roomRepository\n     );\n  }\n\n  sendMessage(room: Room, content: string, contentType: string): Observable<Message> {\n    return room.sendMessage({\n      content: content,\n      contentType: contentType,\n      deviceSessionId: this.deviceSessionId\n    });\n  }\n\n  isSentByMe(message: Message) {\n    return message && message.hasSenderId(this.id);\n  }\n\n  deleteMessage(message: Message): Observable<Message> {\n    if (message) {\n      const room = this.findRoomById(message.roomId);\n      if (room) {\n        return room.delete(message);\n      } else {\n        return of(undefined);\n      }\n    } else {\n      return of(undefined);\n    }\n  }\n\n  addUserTo(room: Room, userId: string): Observable<Room> {\n    return this.roomRepository.addUser(room, userId);\n  }\n\n  private addRooms(rooms: Room[]) {\n    rooms.forEach(room => {\n      this.addRoom(room);\n      if (room.open && !this.hasRoomOpened(room)) {\n        this.openedRooms.push(room);\n      }\n    });\n  }\n\n  private hasRoom(roomToFind: Room): boolean {\n    return this.findRoom(roomToFind) !== undefined;\n  }\n\n  private hasRoomOpened(roomToFind: Room): boolean {\n    return this.findRoomOpened(roomToFind) !== undefined;\n  }\n\n  private findRoom(room: Room): Room {\n    return this.findRoomById(room.id);\n  }\n\n  private findRoomOpened(roomToFind: Room): Room {\n    return this.openedRooms ? this.openedRooms.find(room => roomToFind.id === room.id) : undefined;\n  }\n\n  private addToOpenedRoom(room: Room) {\n    if (!this.hasRoomOpened(room)) {\n      this.openedRooms.push(room);\n    }\n  }\n\n  private removeFromOpenedRoom(closedRoom: Room) {\n    if (this.hasRoomOpened(closedRoom)) {\n      const roomIndex = this.openedRooms ? this.openedRooms.findIndex(room => room.id === closedRoom.id) : undefined;\n      this.openedRooms.splice(roomIndex, 1);\n    }\n  }\n\n  private markAllReceivedMessagesAsRead(room: Room): Observable<Room> {\n    return room.markAllMessagesAsRead()\n               .pipe(map(readMessageCount => {\n                  this.unreadMessageCount = Math.max(this.unreadMessageCount - readMessageCount, 0);\n                  return room;\n                }));\n  }\n\n  private toUser(): User {\n    return new User(this.id, \"\");\n  }\n}\n","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { BabiliConfiguration } from \"../configuration/babili.configuration\";\nimport { empty, Observable } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { RoomRepository } from \"./../room/room.repository\";\nimport { Me } from \"./me.types\";\n\n@Injectable()\nexport class MeRepository {\n\n  constructor(private http: HttpClient,\n              private roomRepository: RoomRepository,\n              private configuration: BabiliConfiguration) {}\n\n  findMe(): Observable<Me> {\n    return this.http.get(this.userUrl).pipe(map(me => Me.build(me, this.roomRepository)));\n  }\n\n  updateAliveness(me: Me): Observable<void> {\n    return this.http.put(this.aliveUrl, { data: { type: \"alive\" }})\n                    .pipe(catchError(() => empty()), map(() => null));\n  }\n\n  private get userUrl(): string {\n    return `${this.configuration.apiUrl}/user`;\n  }\n\n  private get aliveUrl(): string {\n    return `${this.userUrl}/alive`;\n  }\n}\n\n","import { Injectable } from \"@angular/core\";\nimport { BabiliConfiguration } from \"../configuration/babili.configuration\";\nimport * as io from \"socket.io-client\";\n\n@Injectable()\nexport class BootstrapSocket {\n\n  private socket: SocketIOClient.Socket;\n\n  constructor(private configuration: BabiliConfiguration) {}\n\n  connect(token: string): SocketIOClient.Socket {\n    this.socket = io.connect(this.configuration.socketUrl, {\n      forceNew: true,\n      query: `token=${token}`\n    });\n    return this.socket;\n  }\n\n  socketExists(): boolean {\n    return this.socket !== undefined;\n  }\n\n  disconnect() {\n    if (this.socketExists()) {\n      this.socket.close();\n      this.socket = undefined;\n    }\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { BabiliConfiguration } from \"../configuration/babili.configuration\";\nimport { Observable, timer } from \"rxjs\";\nimport { map, publishReplay, refCount, share, takeWhile } from \"rxjs/operators\";\nimport { TokenConfiguration } from \"./../configuration/token-configuration.types\";\nimport { Message } from \"./../message/message.types\";\nimport { BootstrapSocket } from \"./../socket/bootstrap.socket\";\nimport { MeRepository } from \"./me.repository\";\nimport { Me } from \"./me.types\";\n\n@Injectable()\nexport class MeService {\n\n  private cachedMe: Observable<Me>;\n  private alive: boolean;\n\n  constructor(private meRepository: MeRepository,\n              private socketClient: BootstrapSocket,\n              private configuration: BabiliConfiguration,\n              private tokenConfiguration: TokenConfiguration) {\n    this.alive = false;\n  }\n\n  setup(token: string): void {\n    if (!this.tokenConfiguration.isApiTokenSet()) {\n      this.tokenConfiguration.apiToken = token;\n    }\n  }\n\n  me(): Observable<Me> {\n    if (!this.hasCachedMe()) {\n      this.cachedMe = this.meRepository\n                          .findMe()\n                          .pipe(\n                            map(me => this.scheduleAliveness(me)),\n                            publishReplay(1),\n                            refCount(),\n                            share()\n                          );\n    }\n    return this.cachedMe.pipe(map(me => this.connectSocket(me)));\n  }\n\n  clear() {\n    this.tokenConfiguration.clear();\n    this.cachedMe = undefined;\n    this.alive = false;\n  }\n\n  private scheduleAliveness(me: Me): Me {\n    this.alive = true;\n    timer(0, this.configuration.aliveIntervalInMs).pipe(\n      takeWhile(() => this.alive)\n    )\n    .subscribe(() => this.meRepository.updateAliveness(me));\n    return me;\n  }\n\n  private hasCachedMe(): boolean {\n    return this.cachedMe !== undefined;\n  }\n\n  private connectSocket(me: Me): Me {\n    if (!this.socketClient.socketExists()) {\n      const socket = this.socketClient.connect(this.tokenConfiguration.apiToken);\n      socket.on(\"new message\", data => this.receiveNewMessage(data));\n      socket.on(\"connected\", data => me.deviceSessionId = data.deviceSessionId);\n    }\n    return me;\n  }\n\n  private receiveNewMessage(json: any) {\n    const message = Message.build(json.data);\n    this.me().subscribe(me => me.handleNewMessage(message));\n  }\n}\n","import { Pipe, PipeTransform } from \"@angular/core\";\nimport * as momentLoaded from \"moment\";\nimport { Room } from \"../room/room.types\";\nconst moment = momentLoaded;\n\n@Pipe({\n  name: \"sortRooms\"\n})\nexport class SortRoomPipe  implements PipeTransform {\n  transform(rooms: Room[], field: string): any[] {\n    if (rooms !== undefined && rooms !== null) {\n      return rooms.sort((room: Room, otherRoom: Room) => {\n        const lastActivityAt      = room.lastActivityAt;\n        const otherLastActivityAt = otherRoom.lastActivityAt;\n        if (moment(lastActivityAt).isBefore(otherLastActivityAt)) {\n          return 1;\n        } else if (moment(otherLastActivityAt).isBefore(lastActivityAt)) {\n          return -1;\n        } else {\n          return 0;\n        }\n      });\n    } else {\n      return rooms;\n    }\n  }\n}\n","import { HttpClientModule, HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport { ModuleWithProviders, NgModule } from \"@angular/core\";\nimport { BabiliConfiguration } from \"./configuration/babili.configuration\";\nimport { HttpAuthenticationInterceptor } from \"./authentication/http-authentication-interceptor\";\nimport { TokenConfiguration } from \"./configuration/token-configuration.types\";\nimport { MeRepository } from \"./me/me.repository\";\nimport { MeService } from \"./me/me.service\";\nimport { MessageRepository } from \"./message/message.repository\";\nimport { SortRoomPipe } from \"./pipe/sort-room\";\nimport { RoomRepository } from \"./room/room.repository\";\nimport { BootstrapSocket } from \"./socket/bootstrap.socket\";\n\n@NgModule({\n  imports: [\n    HttpClientModule\n  ],\n  declarations: [\n    SortRoomPipe\n  ],\n  exports: [\n    SortRoomPipe\n  ]\n })\nexport class BabiliModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: BabiliModule,\n      providers: [\n        BabiliConfiguration,\n        SortRoomPipe,\n        TokenConfiguration,\n        BootstrapSocket,\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: HttpAuthenticationInterceptor,\n          multi: true\n        },\n        MessageRepository,\n        RoomRepository,\n        MeRepository,\n        MeService\n      ]\n    };\n  }\n}\n"],"names":["Injectable","catchError","HttpErrorResponse","throwError","http","map","HttpClient","moment","BehaviorSubject","of","flatMap","empty","io.connect","publishReplay","refCount","share","timer","takeWhile","Pipe","HTTP_INTERCEPTORS","NgModule","HttpClientModule"],"mappings":"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"}
